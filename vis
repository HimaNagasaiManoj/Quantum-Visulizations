//To view information of qiskit
import qiskit.tools.jupyter
%qiskit_version_table
%qiskit_copyright

qiskit.__qiskit_version__

import qiskit
qiskit.__version__

pip show qiskit-terra

import qiskit
print(qiskit.__version__)

*//


import qiskit
from qiskit import  QuantumCircuit
from qiskit import QuantumCircuit, Aer, transpile, execute
from qiskit.quantum_info import Statevector
from qiskit.visualization import plot_state_city, plot_bloch_multivector
from qiskit.visualization import plot_state_paulivec, plot_state_hinton
from qiskit.visualization import plot_state_qsphere
qc=QuantumCircuit( , )

qc.size()
qc.depth()
qc.dim()



qc.draw()
qc.draw('latex')
print(qc)

backend = Aer.get_backend('statevector_simulator')
result = backend.run(transpile(qc, backend)).result()
qcs = result.get_statevector(qc)

print(qcs)
print(backend)
print(result)
array_to_latex(qcs)

job1=qiskit.execute(qc,qiskit.BasicAer.get_backend('qasm_simulator'))
print(job1.result().get_counts())

//combination of 2 results Histogram

result6=[result4,result5]
legend=['First execution','Second execution']
title='New histogram'
figsize=(10,10)
color=['crimson','midnightblue']
plot_histogram(result6,legend=legend,title=title,figsize=figsize,color=color)

#HADAMER GATE
from qiskit import qiskit,QuantumCircuit
qc=QuantumCircuit(1,1)
qc.h(0)
qc.measure(0,0)
job=qiskit.execute(qc,qiskit.BasicAer.get_backend('qasm_simulator'))
result4=job.result().get_counts()
plot_histogram(result4)


//for histograms
from qiskit.visualization import plot_histogram
result2=job1.result().get_counts()
plot_histogram(result2)

// To plot Bloch Vectors
from qiskit.visualization import plot_bloch_vector
plot_bloch_vector([0,1,0],title="Bloch1")

//need for all down here
backend = Aer.get_backend('statevector_simulator')
result = backend.run(transpile(qc, backend)).result()
qcs = result.get_statevector(qc)


//to visualise quantum bits seperatly
plot_bloch_multivector(qcs)

//to visualize Q bits in single output
plot_state_qsphere(qcs)

//to visualize in 3D
state=Statevector(qc)
plot_state_city(qcs)

//to visualize in 2D
plot_state_hinton(qcs)

// coeff vs pauli
plot_state_paulivec(qcs)

// Visualizations
from qiskit import QuantumCircuit, Aer, transpile, execute
from qiskit.visualization import visualize_transition
qc=QuantumCircuit(1)
qc.h(0)
qc.z(0)
qc.h(0)
visualize_transition(qc, trace=True, saveas="5 H Z H gate.mp4", fpg=30, spg=2)
